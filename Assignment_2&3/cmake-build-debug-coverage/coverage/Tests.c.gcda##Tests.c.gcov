        -:    0:Source:/mnt/c/Users/Admin/Documents/GitHub/a23-912-enache-vlad/Tests.c
        -:    0:Graph:/mnt/c/Users/Admin/Documents/GitHub/a23-912-enache-vlad/cmake-build-debug-coverage/CMakeFiles/a23_912_enache_vlad.dir/Tests.c.gcno
        -:    0:Data:/mnt/c/Users/Admin/Documents/GitHub/a23-912-enache-vlad/cmake-build-debug-coverage/CMakeFiles/a23_912_enache_vlad.dir/Tests.c.gcda
        -:    0:Runs:1
        -:    1:#include "Tests.h"
        -:    2:#include "Service.h"
        -:    3:#include <assert.h>
        -:    4:
function service_add_medicine_test called 1 returned 100% blocks executed 75%
        1:    5:void service_add_medicine_test() {
        1:    6:    Service* service = create_service();
        1:    6-block  0
call    0 returned 1
        1:    7:    char* name = "Paracetamol";
        1:    8:    TInt concentration = 500;
        1:    9:    TInt quantity = 10;
        1:   10:    TInt price = 10;
       1*:   11:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   11-block  0
call    3 never executed
       1*:   12:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 1);
        1:   12-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   12-block  1
call    4 never executed
       1*:   13:    assert(service_add_medicine(service, name, concentration, quantity, price) == 0);
        1:   13-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   13-block  1
call    3 never executed
       1*:   14:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 1);
        1:   14-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   14-block  1
call    4 never executed
       1*:   15:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:   15-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   15-block  1
call    3 never executed
       1*:   16:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   16-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   16-block  1
call    4 never executed
        1:   17:    destroy_service(service);
        1:   17-block  0
call    0 returned 1
        1:   18:}
        -:   19:
function service_remove_medicine_test called 1 returned 100% blocks executed 74%
        1:   20:void service_remove_medicine_test() {
        1:   21:    Service* service = create_service();
        1:   21-block  0
call    0 returned 1
        1:   22:    char* name = "Paracetamol";
        1:   23:    TInt concentration = 500;
        1:   24:    TInt quantity = 10;
        1:   25:    TInt price = 10;
       1*:   26:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   26-block  0
call    3 never executed
       1*:   27:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:   27-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   27-block  1
call    3 never executed
       1*:   28:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   28-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   28-block  1
call    4 never executed
       1*:   29:    assert(service_remove_medicine(service, name, concentration) == 1);
        1:   29-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   29-block  1
call    3 never executed
       1*:   30:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 1);
        1:   30-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   30-block  1
call    4 never executed
       1*:   31:    assert(service_remove_medicine(service, name, concentration) == 0);
        1:   31-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   31-block  1
call    3 never executed
       1*:   32:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 1);
        1:   32-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   32-block  1
call    4 never executed
        1:   33:    destroy_service(service);
        1:   33-block  0
call    0 returned 1
        1:   34:}
        -:   35:
function service_update_medicine_test called 1 returned 100% blocks executed 73%
        1:   36:void service_update_medicine_test() {
        1:   37:    Service* service = create_service();
        1:   37-block  0
call    0 returned 1
        1:   38:    char* name = "Paracetamol";
        1:   39:    TInt concentration = 500;
        1:   40:    TInt quantity = 10;
        1:   41:    TInt price = 10;
       1*:   42:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   42-block  0
call    3 never executed
       1*:   43:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:   43-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   43-block  1
call    3 never executed
       1*:   44:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   44-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   44-block  1
call    4 never executed
       1*:   45:    assert(service_update_medicine(service, name, concentration, 20, 20) == 1);
        1:   45-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   45-block  1
call    3 never executed
       1*:   46:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   46-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   46-block  1
call    4 never executed
       1*:   47:    assert(service_update_medicine(service, "Aspirin", concentration, 20, 20) == 1);
        1:   47-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   47-block  1
call    3 never executed
       1*:   48:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   48-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   48-block  1
call    4 never executed
       1*:   49:    assert(service_update_medicine(service, "Aspirin", concentration, 20, 20) == 1);
        1:   49-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   49-block  1
call    3 never executed
       1*:   50:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   50-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   50-block  1
call    4 never executed
       1*:   51:    assert(service_update_medicine(service, "Aspirin", concentration, 20, 20) == 1);
        1:   51-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   51-block  1
call    3 never executed
       1*:   52:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   52-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   52-block  1
call    4 never executed
        1:   53:    destroy_service(service);
        1:   53-block  0
call    0 returned 1
        1:   54:}
        -:   55:
function service_get_medicine_list_test called 1 returned 100% blocks executed 77%
        1:   56:void service_get_medicine_list_test() {
        1:   57:    Service* service = create_service();
        1:   57-block  0
call    0 returned 1
        1:   58:    char* name = "Paracetamol";
        1:   59:    TInt concentration = 500;
        1:   60:    TInt quantity = 10;
        1:   61:    TInt price = 10;
       1*:   62:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   62-block  0
call    3 never executed
       1*:   63:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:   63-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   63-block  1
call    3 never executed
       1*:   64:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
        1:   64-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   64-block  1
call    4 never executed
        1:   65:    destroy_service(service);
        1:   65-block  0
call    0 returned 1
        1:   66:}
        -:   67:
function service_list_medicines_by_name_test called 1 returned 100% blocks executed 75%
        1:   68:void service_list_medicines_by_name_test() {
        1:   69:    Service* service = create_service();
        1:   69-block  0
call    0 returned 1
        1:   70:    char* name = "Paracetamol";
        1:   71:    TInt concentration = 500;
        1:   72:    TInt quantity = 10;
        1:   73:    TInt price = 10;
       1*:   74:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   74-block  0
call    3 never executed
       1*:   75:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:   75-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   75-block  1
call    3 never executed
       1*:   76:    assert(service_add_medicine(service, "Paracetamol", concentration + 100, quantity, price) == 1);
        1:   76-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   76-block  1
call    3 never executed
        1:   77:    TInt length = 0;
       1*:   78:    assert(getSize_DynamicArray(service_list_medicines_by_name(service, name,&length)) == 2);
        1:   78-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   78-block  1
call    4 never executed
        1:   79:    destroy_service(service);
        1:   79-block  0
call    0 returned 1
        1:   80:}
        -:   81:
function service_list_medicines_in_short_supply_test called 1 returned 100% blocks executed 75%
        1:   82:void service_list_medicines_in_short_supply_test() {
        1:   83:    Service* service = create_service();
        1:   83-block  0
call    0 returned 1
        1:   84:    char* name = "Paracetamol";
        1:   85:    TInt concentration = 500;
        1:   86:    TInt quantity = 10;
        1:   87:    TInt price = 10;
       1*:   88:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   88-block  0
call    3 never executed
       1*:   89:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:   89-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   89-block  1
call    3 never executed
       1*:   90:    assert(service_add_medicine(service, "Paracetamol", concentration + 100, quantity, price) == 1);
        1:   90-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   90-block  1
call    3 never executed
        1:   91:    TInt length = 0;
       1*:   92:    assert(getSize_DynamicArray(service_list_medicines_in_short_supply(service, &length, 50)) == 3);
        1:   92-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:   92-block  1
call    4 never executed
        1:   93:    destroy_service(service);
        1:   93-block  0
call    0 returned 1
        1:   94:}
        -:   95:
function undo_test called 1 returned 100% blocks executed 77%
        1:   96:void undo_test(){
        1:   97:    Service* service = create_service();
        1:   97-block  0
call    0 returned 1
        1:   98:    char* name = "Paracetamol";
        1:   99:    TInt concentration = 500;
        1:  100:    TInt quantity = 10;
        1:  101:    TInt price = 10;
       1*:  102:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  102-block  0
call    3 never executed
       1*:  103:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:  103-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  103-block  1
call    3 never executed
        1:  104:    undo(service);
        1:  104-block  0
call    0 returned 1
       1*:  105:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 1);
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  105-block  0
call    4 never executed
        1:  106:}
        -:  107:
function redo_test called 1 returned 100% blocks executed 78%
        1:  108:void redo_test(){
        1:  109:    Service* service = create_service();
        1:  109-block  0
call    0 returned 1
        1:  110:    char* name = "Paracetamol";
        1:  111:    TInt concentration = 500;
        1:  112:    TInt quantity = 10;
        1:  113:    TInt price = 10;
       1*:  114:    assert(service_add_medicine(service, name, concentration, quantity, price) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  114-block  0
call    3 never executed
       1*:  115:    assert(service_add_medicine(service, "Aspirin", concentration, quantity, price) == 1);
        1:  115-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  115-block  1
call    3 never executed
        1:  116:    undo(service);
        1:  116-block  0
call    0 returned 1
       1*:  117:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 1);
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  117-block  0
call    4 never executed
        1:  118:    redo(service);
        1:  118-block  0
call    0 returned 1
       1*:  119:    assert(getSize_DynamicArray(service_get_medicine_list(service)) == 2);
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  119-block  0
call    4 never executed
        1:  120:}
        -:  121:
function test_all called 1 returned 100% blocks executed 100%
        1:  122:void test_all() {
        1:  123:    service_add_medicine_test();
        1:  123-block  0
call    0 returned 1
        1:  124:    service_remove_medicine_test();
call    0 returned 1
        1:  125:    service_update_medicine_test();
call    0 returned 1
        1:  126:    service_get_medicine_list_test();
call    0 returned 1
        1:  127:    service_list_medicines_by_name_test();
call    0 returned 1
        1:  128:    service_list_medicines_in_short_supply_test();
call    0 returned 1
        1:  129:    undo_test();
call    0 returned 1
        1:  130:    redo_test();
call    0 returned 1
        1:  131:}
        -:  132:
        -:  133:
