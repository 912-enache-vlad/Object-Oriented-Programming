        -:    0:Source:/mnt/c/Users/Admin/Documents/GitHub/a45-912-enache-vlad/DynamicVector.h
        -:    0:Graph:/mnt/c/Users/Admin/Documents/GitHub/a45-912-enache-vlad/cmake-build-debug-coverage/CMakeFiles/a45_912_enache_vlad.dir/RepoShelterDogs.cpp.gcno
        -:    0:Data:/mnt/c/Users/Admin/Documents/GitHub/a45-912-enache-vlad/cmake-build-debug-coverage/CMakeFiles/a45_912_enache_vlad.dir/RepoShelterDogs.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:template <typename TypeOfElement> class DynamicVector {
        -:    4:private:
        -:    5:    // the array of elements
        -:    6:    TypeOfElement* elements;
        -:    7:    // the current size of the vector
        -:    8:    int size{};
        -:    9:    // the current capacity of the vector
        -:   10:    int capacity{};
        -:   11:    // Resizes is private because we don't want the user to be able to change the capacity of the vector
        -:   12:    void resize(int newCapacity);
        -:   13:    
        -:   14:public:
        -:   15:    /// Constructors and destructor
        -:   16:    // Constructor
        -:   17:    explicit DynamicVector(int capacity = 10); // explicit keyword is used with a constructor to prevent it from performing implicit conversions
        -:   18:    // Copy constructor
        -:   19:    DynamicVector(const DynamicVector& other); // const keyword is used to prevent the function from modifying the dynamic vector
        -:   20:    // Operator =
        -:   21:    DynamicVector& operator=(const DynamicVector& other);
        -:   22:    // Destructor
        -:   23:    ~DynamicVector();
        -:   24:
        -:   25:    /// Functions
        -:   26:    void addElement(const TypeOfElement& newElement); // const keyword is used to prevent the function from modifying the object even though is transmitted by reference
        -:   27:    void addElementToPosition(const TypeOfElement& newElement, int position);
        -:   28:    void removeCertainElement(const TypeOfElement& element);
        -:   29:    TypeOfElement* findElement(const TypeOfElement& element);
        -:   30:    void removeElementFromPosition(int position);
        -:   31:    
        -:   32:
        -:   33:    /// Operators
        -:   34:    // Overload the subscript operator for non-const objects
        -:   35:    TypeOfElement& operator[](int position);
        -:   36:    // Overload the subscript operator for const objects
        -:   37:    const TypeOfElement& operator[](int position) const;
        -:   38:    void setElement(int position, const TypeOfElement& newElement);
        -:   39:
        -:   40:    /// Getters
        -:   41:    // Returns the size of the vector
        -:   42:    int getSize() const;
        -:   43:    // Returns the capacity of the vector
        -:   44:    int getCapacity() const;
        -:   45:};
        -:   46:
        -:   47:// Constructor
        -:   48:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogEC2Ei called 0 returned 0% blocks executed 0%
    #####:   49:DynamicVector<TypeOfElement>::DynamicVector(int capacity):
    #####:   50:    size{0}, capacity{capacity} // member initializer list
        -:   51:{
    #####:   52:    this->elements = new TypeOfElement[capacity];
    %%%%%:   52-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   52-block  1
    %%%%%:   52-block  2
    %%%%%:   52-block  3
call    2 never executed
    %%%%%:   52-block  4
branch  3 never executed
branch  4 never executed
    %%%%%:   52-block  5
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   52-block  6
    $$$$$:   52-block  7
    $$$$$:   52-block  8
call    8 never executed
    $$$$$:   52-block  9
call    9 never executed
        -:   53:
    #####:   54:}
    %%%%%:   54-block  0
        -:   55:
        -:   56:// Copy constructor
        -:   57:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogEC2ERKS1_ called 26 returned 100% blocks executed 65%
       26:   58:DynamicVector<TypeOfElement>::DynamicVector(const DynamicVector &other) {
       26:   59:    this->size = other.size;
       26:   60:    this->capacity = other.capacity;
     286*:   61:    this->elements = new TypeOfElement[this->capacity];
       26:   61-block  0
branch  0 taken 26 (fallthrough)
branch  1 taken 0
       26:   61-block  1
    %%%%%:   61-block  2
       26:   61-block  3
call    2 returned 26
      286:   61-block  4
branch  3 taken 260 (fallthrough)
branch  4 taken 26
      260:   61-block  5
call    5 returned 260
branch  6 taken 260 (fallthrough)
branch  7 taken 0 (throw)
      260:   61-block  6
    $$$$$:   61-block  7
    $$$$$:   61-block  8
call    8 never executed
    $$$$$:   61-block  9
call    9 never executed
       54:   62:    for (int i = 0; i < this->size; i++)
       26:   62-block  0
       54:   62-block  1
branch  0 taken 28 (fallthrough)
branch  1 taken 26
       28:   63:        this->elements[i] = other.elements[i];
       28:   63-block  0
call    0 returned 28
        -:   64:
       26:   65:}
       26:   65-block  0
        -:   66:
        -:   67:// Operator =
        -:   68:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogEaSERKS1_ called 4 returned 100% blocks executed 67%
        4:   69:DynamicVector<TypeOfElement> &DynamicVector<TypeOfElement>::operator=(const DynamicVector &other) {
        4:   70:    if (this != &other) {
        4:   70-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   71:        this->size = other.size;
        4:   72:        this->capacity = other.capacity;
       44:   73:        delete[] this->elements;
        4:   73-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   73-block  1
       44:   73-block  2
branch  2 taken 40 (fallthrough)
branch  3 taken 4
       40:   73-block  3
call    4 returned 40
        4:   73-block  4
call    5 returned 4
      44*:   74:        this->elements = new TypeOfElement[this->capacity];
        4:   74-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4:   74-block  1
    %%%%%:   74-block  2
        4:   74-block  3
call    2 returned 4
       44:   74-block  4
branch  3 taken 40 (fallthrough)
branch  4 taken 4
       40:   74-block  5
call    5 returned 40
branch  6 taken 40 (fallthrough)
branch  7 taken 0 (throw)
       40:   74-block  6
    $$$$$:   74-block  7
    $$$$$:   74-block  8
call    8 never executed
    $$$$$:   74-block  9
call    9 never executed
       4*:   75:        for (int i = 0; i < this->size; i++)
        4:   75-block  0
        4:   75-block  1
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:   76:            this->elements[i] = other.elements[i];
    %%%%%:   76-block  0
call    0 never executed
        -:   77:    }
        4:   78:    return *this;
        4:   78-block  0
        4:   78-block  1
        -:   79:}
        -:   80:
        -:   81:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogED2Ev called 0 returned 0% blocks executed 0%
    #####:   82:DynamicVector<TypeOfElement>::~DynamicVector() {
    #####:   83:    delete[] this->elements;
    %%%%%:   83-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   83-block  1
    %%%%%:   83-block  2
branch  2 never executed
branch  3 never executed
    %%%%%:   83-block  3
call    4 never executed
    %%%%%:   83-block  4
call    5 never executed
        -:   84:
    #####:   85:}
        -:   86:
        -:   87:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogE10addElementERKS0_ called 14 returned 100% blocks executed 75%
       14:   88:void DynamicVector<TypeOfElement>::addElement(const TypeOfElement &newElement) {
       14:   89:    if (this->size == this->capacity)
       14:   89-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 14
    #####:   90:        this->resize(this->capacity * 2);
    %%%%%:   90-block  0
call    0 never executed
       14:   91:    this->elements[this->size] = newElement;
       14:   91-block  0
call    0 returned 14
       14:   92:    this->size++;
        -:   93:
       14:   94:}
        -:   95:
        -:   96:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogE6resizeEi called 0 returned 0% blocks executed 0%
    #####:   97:void DynamicVector<TypeOfElement>::resize(int newCapacity) {
    #####:   98:    auto* newData = new TypeOfElement[newCapacity];
    %%%%%:   98-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   98-block  1
    %%%%%:   98-block  2
    %%%%%:   98-block  3
call    2 never executed
    %%%%%:   98-block  4
branch  3 never executed
branch  4 never executed
    %%%%%:   98-block  5
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   98-block  6
    $$$$$:   98-block  7
    $$$$$:   98-block  8
call    8 never executed
    $$$$$:   98-block  9
call    9 never executed
        -:   99:    // Copy the elements from the old array to the new one
    #####:  100:    for (int i = 0; i < this->size; i++)
    %%%%%:  100-block  0
    %%%%%:  100-block  1
branch  0 never executed
branch  1 never executed
    #####:  101:        newData[i] = this->elements[i];
    %%%%%:  101-block  0
call    0 never executed
    #####:  102:    this->capacity = newCapacity;
    #####:  103:    delete[] this->elements;    // delete the old array
    %%%%%:  103-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  103-block  1
    %%%%%:  103-block  2
branch  2 never executed
branch  3 never executed
    %%%%%:  103-block  3
call    4 never executed
    %%%%%:  103-block  4
call    5 never executed
    #####:  104:    this->elements = newData;   // make the elements pointer point to the new array
    #####:  105:}
    %%%%%:  105-block  0
        -:  106:
        -:  107:template<typename TypeOfElement>
function _ZNK13DynamicVectorI3DogE7getSizeEv called 0 returned 0% blocks executed 0%
    #####:  108:int DynamicVector<TypeOfElement>::getSize() const {
    #####:  109:    return this->size;
    %%%%%:  109-block  0
        -:  110:}
        -:  111:
        -:  112:template<typename TypeOfElement>
        -:  113:int DynamicVector<TypeOfElement>::getCapacity() const {
        -:  114:    return this->capacity;
        -:  115:}
        -:  116:
        -:  117:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogEixEi called 0 returned 0% blocks executed 0%
    #####:  118:TypeOfElement &DynamicVector<TypeOfElement>::operator[](int position) {
    #####:  119:    return this->elements[position];
    %%%%%:  119-block  0
        -:  120:}
        -:  121:
        -:  122:template<typename TypeOfElement>
        -:  123:const TypeOfElement &DynamicVector<TypeOfElement>::operator[](int position) const {
        -:  124:    return this->elements[position];
        -:  125:}
        -:  126:
        -:  127:// overwrite operator[] to set an element at a given position
        -:  128:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogE10setElementEiRKS0_ called 2 returned 100% blocks executed 100%
        2:  129:void DynamicVector<TypeOfElement>:: setElement(int position, const TypeOfElement& newElement) {
        2:  130:    this->elements[position] = newElement;
        2:  130-block  0
call    0 returned 2
        2:  131:}
        -:  132:
        -:  133:
        -:  134:
        -:  135:template<typename TypeOfElement>
        -:  136:void DynamicVector<TypeOfElement>::removeCertainElement(const TypeOfElement &element) {
        -:  137:    int position = 0;
        -:  138:    for (int i = 0; i < this->size; i++)
        -:  139:        if (this->elements[i] == element)
        -:  140:            position = i;
        -:  141:    this->removeElementFromPosition(position);
        -:  142:
        -:  143:}
        -:  144:
        -:  145:template<typename TypeOfElement>
function _ZN13DynamicVectorI3DogE25removeElementFromPositionEi called 3 returned 100% blocks executed 57%
        3:  146:void DynamicVector<TypeOfElement>::removeElementFromPosition(int position) {
       3*:  147:    for (int i = position; i < this->size - 1; i++)
        3:  147-block  0
        3:  147-block  1
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  148:        this->elements[i] = this->elements[i + 1];
    %%%%%:  148-block  0
call    0 never executed
        3:  149:    this->size--;
        -:  150:    // If the vector is 1/4 full, resize it to half the capacity
        3:  151:    if (this->size == this->capacity / 4)
        3:  151-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  152:        this->resize(this->capacity / 2);
    %%%%%:  152-block  0
call    0 never executed
        3:  153:}
        -:  154:
        -:  155:template<typename TypeOfElement>
        -:  156:TypeOfElement *DynamicVector<TypeOfElement>::findElement(const TypeOfElement &element) {
        -:  157:    for (int i = 0; i < this->size; i++)
        -:  158:        if (this->elements[i] == element)
        -:  159:            return &this->elements[i];
        -:  160:    // If the element is not found, return a null pointer
        -:  161:    return nullptr;
        -:  162:}
        -:  163:
        -:  164:template<typename TypeOfElement>
        -:  165:void DynamicVector<TypeOfElement>::addElementToPosition(const TypeOfElement &newElement, int position) {
        -:  166:    if (this->size == this->capacity)
        -:  167:        this->resize(this->capacity * 2);
        -:  168:    for (int i = this->size; i > position; i--)
        -:  169:        this->elements[i] = this->elements[i - 1];
        -:  170:    this->elements[position] = newElement;
        -:  171:    this->size++;
        -:  172:
        -:  173:}
        -:  174:
        -:  175:
